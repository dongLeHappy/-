{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Administrator\\Desktop\\vuepress\\docs\\blog\\theGit.md?vue&type=template&id=60fe3d75&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\docs\\blog\\theGit.md","mtime":1560862390038},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _vm._m(0)\n}\nvar staticRenderFns = [\n  function() {\n    var _vm = this\n    var _h = _vm.$createElement\n    var _c = _vm._self._c || _h\n    return _c(\"div\", { staticClass: \"content\" }, [\n      _c(\"h2\", { attrs: { id: \"学习git\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#学习git\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 学习git\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"首先安装git\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#首先安装git\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 首先安装git\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"然后呢-git-add-添加文件\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#然后呢-git-add-添加文件\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 然后呢  \"),\n        _c(\"code\", [_vm._v(\"git add .\")]),\n        _vm._v(\" 添加文件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"git-commit-m-写注释-提交文件\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#git-commit-m-写注释-提交文件\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" \"),\n        _c(\"code\", [_vm._v(\"git commit -m '写注释''\")]),\n        _vm._v(\" 提交文件\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"h4\", { attrs: { id: \"把本地项目发布到自己的github上面\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: {\n              href: \"#把本地项目发布到自己的github上面\",\n              \"aria-hidden\": \"true\"\n            }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" 把本地项目发布到自己的github上面\")\n      ]),\n      _vm._v(\" \"),\n      _c(\n        \"h5\",\n        {\n          attrs: {\n            id:\n              \"按照上面的步骤代码提交完成之后-，登录github，选择new-repository-填写相关，然后create，这样就已经建好一个联名仓库了\"\n          }\n        },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href:\n                  \"#按照上面的步骤代码提交完成之后-，登录github，选择new-repository-填写相关，然后create，这样就已经建好一个联名仓库了\",\n                \"aria-hidden\": \"true\"\n              }\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\n            \" 按照上面的步骤代码提交完成之后 ，登录github，选择New repository,填写相关，然后create，这样就已经建好一个联名仓库了\"\n          )\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\n        \"h5\",\n        {\n          attrs: {\n            id:\n              \"而后呢会生成一个仓库地址，然后输入指令git-remote-add-origin-仓库地址，然后git-push-u-origin-master就ok了\"\n          }\n        },\n        [\n          _c(\n            \"a\",\n            {\n              staticClass: \"header-anchor\",\n              attrs: {\n                href:\n                  \"#而后呢会生成一个仓库地址，然后输入指令git-remote-add-origin-仓库地址，然后git-push-u-origin-master就ok了\",\n                \"aria-hidden\": \"true\"\n              }\n            },\n            [_vm._v(\"#\")]\n          ),\n          _vm._v(\" 而后呢会生成一个仓库地址，然后输入指令\"),\n          _c(\"code\", [_vm._v(\"git remote add origin\")]),\n          _vm._v(\"+仓库地址，然后\"),\n          _c(\"code\", [_vm._v(\"git push -u origin master\")]),\n          _vm._v(\"就ok了\")\n        ]\n      ),\n      _vm._v(\" \"),\n      _c(\"h2\", { attrs: { id: \"git的常用命令\" } }, [\n        _c(\n          \"a\",\n          {\n            staticClass: \"header-anchor\",\n            attrs: { href: \"#git的常用命令\", \"aria-hidden\": \"true\" }\n          },\n          [_vm._v(\"#\")]\n        ),\n        _vm._v(\" git的常用命令\")\n      ]),\n      _vm._v(\" \"),\n      _c(\"div\", { staticClass: \"language- extra-class\" }, [\n        _c(\"pre\", { pre: true, attrs: { class: \"language-text\" } }, [\n          _c(\"code\", [\n            _vm._v(\n              'Git命令\\n查看、添加、提交、删除、找回，重置修改文件\\n\\ngit help <command> # 显示command的help\\n \\ngit show # 显示某次提交的内容 git show $id\\n \\ngit co -- <file> # 抛弃工作区修改\\n \\ngit co . # 抛弃工作区修改\\n \\ngit add <file> # 将工作文件修改提交到本地暂存区\\n \\ngit add . # 将所有修改过的工作文件提交暂存区\\n \\ngit rm <file> # 从版本库中删除文件\\n \\ngit rm <file> --cached # 从版本库中删除文件，但不删除文件\\n \\ngit reset <file> # 从暂存区恢复到工作文件\\n \\ngit reset -- . # 从暂存区恢复到工作文件\\n \\ngit reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\\n \\ngit ci <file> git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am \"some comments\"\\n \\ngit ci --amend # 修改最后一次提交记录\\n \\ngit revert <$id> # 恢复某次提交的状态，恢复动作本身也创建次提交对象\\n \\ngit revert HEAD # 恢复最后一次提交的状态\\n\\n\\n\\n\\n查看文件diff\\n\\ngit diff <file> # 比较当前文件和暂存区文件差异 git diff\\n \\ngit diff <id1><id2> # 比较两次提交之间的差异\\n \\ngit diff <branch1>..<branch2> # 在两个分支之间比较\\n \\ngit diff --staged # 比较暂存区和版本库差异\\n \\ngit diff --cached # 比较暂存区和版本库差异\\n \\ngit diff --stat # 仅仅比较统计信息\\n\\n'\n            )\n          ])\n        ])\n      ])\n    ])\n  }\n]\nrender._withStripped = true\n\nexport { render, staticRenderFns }"]}