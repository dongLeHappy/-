{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Administrator\\Desktop\\vuepress\\docs\\blog\\theGit.md?vue&type=template&id=60fe3d75&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\docs\\blog\\theGit.md","mtime":1560862390038},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h2 id=\"学习git\"><a class=\"header-anchor\" href=\"#学习git\" aria-hidden=\"true\">#</a> 学习git</h2>\n<h4 id=\"首先安装git\"><a class=\"header-anchor\" href=\"#首先安装git\" aria-hidden=\"true\">#</a> 首先安装git</h4>\n<h4 id=\"然后呢-git-add-添加文件\"><a class=\"header-anchor\" href=\"#然后呢-git-add-添加文件\" aria-hidden=\"true\">#</a> 然后呢  <code>git add .</code> 添加文件</h4>\n<h4 id=\"git-commit-m-写注释-提交文件\"><a class=\"header-anchor\" href=\"#git-commit-m-写注释-提交文件\" aria-hidden=\"true\">#</a> <code>git commit -m '写注释''</code> 提交文件</h4>\n<h4 id=\"把本地项目发布到自己的github上面\"><a class=\"header-anchor\" href=\"#把本地项目发布到自己的github上面\" aria-hidden=\"true\">#</a> 把本地项目发布到自己的github上面</h4>\n<h5 id=\"按照上面的步骤代码提交完成之后-，登录github，选择new-repository-填写相关，然后create，这样就已经建好一个联名仓库了\"><a class=\"header-anchor\" href=\"#按照上面的步骤代码提交完成之后-，登录github，选择new-repository-填写相关，然后create，这样就已经建好一个联名仓库了\" aria-hidden=\"true\">#</a> 按照上面的步骤代码提交完成之后 ，登录github，选择New repository,填写相关，然后create，这样就已经建好一个联名仓库了</h5>\n<h5 id=\"而后呢会生成一个仓库地址，然后输入指令git-remote-add-origin-仓库地址，然后git-push-u-origin-master就ok了\"><a class=\"header-anchor\" href=\"#而后呢会生成一个仓库地址，然后输入指令git-remote-add-origin-仓库地址，然后git-push-u-origin-master就ok了\" aria-hidden=\"true\">#</a> 而后呢会生成一个仓库地址，然后输入指令<code>git remote add origin</code>+仓库地址，然后<code>git push -u origin master</code>就ok了</h5>\n<h2 id=\"git的常用命令\"><a class=\"header-anchor\" href=\"#git的常用命令\" aria-hidden=\"true\">#</a> git的常用命令</h2>\n<!--beforebegin--><div class=\"language- extra-class\"><!--afterbegin--><pre v-pre class=\"language-text\"><code>Git命令\n查看、添加、提交、删除、找回，重置修改文件\n\ngit help &lt;command&gt; # 显示command的help\n \ngit show # 显示某次提交的内容 git show $id\n \ngit co -- &lt;file&gt; # 抛弃工作区修改\n \ngit co . # 抛弃工作区修改\n \ngit add &lt;file&gt; # 将工作文件修改提交到本地暂存区\n \ngit add . # 将所有修改过的工作文件提交暂存区\n \ngit rm &lt;file&gt; # 从版本库中删除文件\n \ngit rm &lt;file&gt; --cached # 从版本库中删除文件，但不删除文件\n \ngit reset &lt;file&gt; # 从暂存区恢复到工作文件\n \ngit reset -- . # 从暂存区恢复到工作文件\n \ngit reset --hard # 恢复最近一次提交过的状态，即放弃上次提交后的所有本次修改\n \ngit ci &lt;file&gt; git ci . git ci -a # 将git add, git rm和git ci等操作都合并在一起做　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　　git ci -am &quot;some comments&quot;\n \ngit ci --amend # 修改最后一次提交记录\n \ngit revert &lt;$id&gt; # 恢复某次提交的状态，恢复动作本身也创建次提交对象\n \ngit revert HEAD # 恢复最后一次提交的状态\n\n\n\n\n查看文件diff\n\ngit diff &lt;file&gt; # 比较当前文件和暂存区文件差异 git diff\n \ngit diff &lt;id1&gt;&lt;id2&gt; # 比较两次提交之间的差异\n \ngit diff &lt;branch1&gt;..&lt;branch2&gt; # 在两个分支之间比较\n \ngit diff --staged # 比较暂存区和版本库差异\n \ngit diff --cached # 比较暂存区和版本库差异\n \ngit diff --stat # 仅仅比较统计信息\n\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}