{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\index.js??ref--1-1!C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js??ref--1-2!C:\\Users\\Administrator\\Desktop\\vuepress\\docs\\blog\\vue-vuex.md?vue&type=template&id=59091786&","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\docs\\blog\\vue-vuex.md","mtime":1560263695876},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\Administrator\\Desktop\\vuepress\\node_modules\\vuepress\\lib\\webpack\\markdownLoader.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<div class=\"content\"><h1 id=\"vuex使用总结\"><a class=\"header-anchor\" href=\"#vuex使用总结\" aria-hidden=\"true\">#</a> vuex使用总结</h1>\n<h2 id=\"vuex-状态库\"><a class=\"header-anchor\" href=\"#vuex-状态库\" aria-hidden=\"true\">#</a> vuex(状态库)</h2>\n<h4 id=\"状态库里面的使用场景\"><a class=\"header-anchor\" href=\"#状态库里面的使用场景\" aria-hidden=\"true\">#</a> 状态库里面的使用场景</h4>\n<h4 id=\"存储方式（1）\"><a class=\"header-anchor\" href=\"#存储方式（1）\" aria-hidden=\"true\">#</a> 存储方式（1）</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 首先定义state</span>\nstate：<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 这里存储页面所需要的数据，比如：</span>\n  <span class=\"token comment\">// 加入这个值是比较通用于各个页面的，父子之间穿又麻烦的话就直接存到状态库</span>\n  listArr<span class=\"token punctuation\">:</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> \n  <span class=\"token comment\">// 注：其实能尽量在组件间传值，那我们就尽量不要存状态库，毕竟会有重量，有害性能</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 再就是mutations</span>\nmutations<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">SET_OPENLOTTERYCODE</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">state<span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">// openapi彩种</span>\n    <span class=\"token comment\">// action里面commit过来的值在这里接收，并且赋值到state里面的变量里，这样每个组件就都能公用这个值了</span>\n      state<span class=\"token punctuation\">.</span>openLotteryCode <span class=\"token operator\">=</span> data\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 其次就是actions</span>\nactions<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 顾名思义就是在这里做操作的意思</span>\n  <span class=\"token comment\">// 我们可以在这里对接口函数进行操作</span>\n  <span class=\"token comment\">// 使用commit的方式commit出去</span>\n  <span class=\"token comment\">// 比如：</span>\n  <span class=\"token function\">getOpenLotteryCode</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> commit <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> data</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">//接口函数为 getOpenLotteryCode，data为接口回参</span>\n      <span class=\"token comment\">// 我们把接口返回参数commit出去，commit的对象名为'SET_OPENLOTTERYCODE'</span>\n      <span class=\"token comment\">// 而'SET_OPENLOTTERYCODE'就在mutations里面</span>\n      <span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SET_OPENLOTTERYCODE'</span><span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"存储方式（2）\"><a class=\"header-anchor\" href=\"#存储方式（2）\" aria-hidden=\"true\">#</a> 存储方式（2）</h4>\n<p>--- 直接拿到状态库的state里面的某个变量进行赋值</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 拿到状态库里面state下的名为homeData下的myVar赋值为myVal</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>homeData<span class=\"token punctuation\">.</span>myVar <span class=\"token operator\">=</span> <span class=\"token string\">'myVal'</span><span class=\"token punctuation\">;</span> \n</code></pre>\n<!--beforeend--></div><!--afterend--><p>--- 通过vuex在mapState里面拿到</p>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 首先引入vux</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mapState <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'vuex'</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 然后在computed里面</span>\n<span class=\"token operator\">...</span><span class=\"token function\">mapState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// firstRuleList为自定义要使用的变量名</span>\n    <span class=\"token comment\">// state => state.homeData.thisFirstRule, 表示数据已经从状态库取出来赋值给firstRuleList</span>\n    <span class=\"token function-variable function\">firstRuleList</span><span class=\"token punctuation\">:</span> <span class=\"token parameter\">state</span> <span class=\"token operator\">=></span> state<span class=\"token punctuation\">.</span>homeData<span class=\"token punctuation\">.</span>thisFirstRule<span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// 注：用的时候要用this,比如：this.firstRuleList</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"存储方式（3）\"><a class=\"header-anchor\" href=\"#存储方式（3）\" aria-hidden=\"true\">#</a> 存储方式（3）</h4>\n<!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>  <span class=\"token comment\">// 比如在页面里有一个接口函数</span>\n  methods<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">getlist</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 存储到store里面的变量myVar的值为5</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myVar'</span><span class=\"token punctuation\">,</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>\n      <span class=\"token comment\">// 或者可以存分对象或者数组</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$store<span class=\"token punctuation\">.</span><span class=\"token function\">commit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'myVar'</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span>one<span class=\"token punctuation\">:</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span>twe<span class=\"token punctuation\">:</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h2 id=\"项目总结\"><a class=\"header-anchor\" href=\"#项目总结\" aria-hidden=\"true\">#</a> 项目总结</h2>\n<h4 id=\"v-model的使用\"><a class=\"header-anchor\" href=\"#v-model的使用\" aria-hidden=\"true\">#</a> v-model的使用</h4>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modelMount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code><span class=\"token comment\">// 比如有一个函数;</span>\nmethods<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">getMount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>modelMount <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 那么我们就把20赋值到input框里面了</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"三目运算符\"><a class=\"header-anchor\" href=\"#三目运算符\" aria-hidden=\"true\">#</a> 三目运算符</h4>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>modelMount == '' ? '10' : modelMount<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span> \n<span class=\"token comment\">&lt;!-- 假如modelMount等于空那么modelMount = 10，否则就是modelMount --></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><h4 id=\"filter的使用-非常好用\"><a class=\"header-anchor\" href=\"#filter的使用-非常好用\" aria-hidden=\"true\">#</a> filter的使用(非常好用)</h4>\n<!--beforebegin--><div class=\"language-html extra-class\"><!--afterbegin--><pre v-pre class=\"language-html\"><code><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>{{num | changeNum}}<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">&lt;!-- num表示的当前的值，changeNum表示filter函数，参数就是当前的这个num，然后我们在filter里面写操作 --></span>\n</code></pre>\n<!--beforeend--></div><!--afterend--><!--beforebegin--><div class=\"language-js extra-class\"><!--afterbegin--><pre v-pre class=\"language-js\"><code>filter<span class=\"token punctuation\">:</span><span class=\"token punctuation\">{</span>\n  <span class=\"token function\">changeNum</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 这个函数就是在html李阿敏定义的，参数num就是html的值</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token string\">'已成功'</span>\n      <span class=\"token comment\">// 表示如果num是1的话，就返回'已成功'，上面的num就变成了'已成功'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<!--beforeend--></div><!--afterend--></div>\n",null]}